@using mojoPortal.Business.WebHelpers;
@using mojoPortal.Business;

@{ 
	var siteSettings = CacheHelper.GetCurrentSiteSettings();
	var pageSettings = new PageSettings(Model.Site.Id, Model.Page.Id);
	var module = new Module(Model.Module.Guid);

	var afterMessage = "<span class='alert alert-info text-center'><b>The countdown is over.</b> Thank you!</span>";
	if (!string.IsNullOrWhiteSpace(Model.Items[0].aftermessage))
	{
		afterMessage = Model.Items[0].aftermessage.Trim();
	}
}

<div class="@(Model.Config.ModuleCssClass)" id="module@(Model.Module.Id)" data-contentsection="@Model.Config.ModuleFriendlyName" data-customsettings="@Model.Config.CustomizableSettings">

	@if (Model.Items.Count == 0) {
		@Html.Partial("_ModuleTitle")
	}

	@if (Model.Config.UseHeader && !string.IsNullOrWhiteSpace(Model.Config.HeaderContent))
	{
		<div class="@(Model.Config.ModuleCssClass)__header">@Html.Raw(@Model.Config.HeaderContent)</div>
	}
	<div class="@(Model.Config.ModuleCssClass)__items" id="@(Model.Config.ModuleCssClass)-@Model.Module.Id">
		@if (Model.Items.Count > 0) {
			var item = Model.Items[0];
			<div class="@(Model.Config.ModuleCssClass)__item">
				<div class="@(Model.Config.ModuleCssClass)__item--inner" style="@(!String.IsNullOrWhiteSpace(item.image) ? "background-image: url(" + @item.image +");": "")">
					@Html.Partial("_ModuleTitle")
					@if (item.IsEditable)
					{
						<a class="ModuleEditLink flexi-item-edit" href="@item.EditUrl"><span class="fa fa-edit"></span> Edit Clock</a>
					}
					<div class="@(Model.Config.ModuleCssClass)__content">
						@if (!String.IsNullOrWhiteSpace(item.content))
						{
							<span class="@(Model.Config.ModuleCssClass)__content-innerwrap">@Html.Raw(@item.content)</span>
						}
						<div class="countdown-clock-wrapper">
							<div id="countdownClock-@Model.Module.Id" class="countdown-clock" role="timer">
								
								@{ 
									@*var dt = TimeZoneInfo.ConvertTimeToUtc(DateTime.SpecifyKind(Model.Items[0].targetdate, DateTimeKind.Local));*@
									if (DateTime.Compare(Model.Items[0].targetdateUTC, DateTime.UtcNow) <= 0) {
										<div class="countdownClock__aftermessage">
											@Html.Raw(@afterMessage)
											@*dt: <text>@dt</text><br>
											TargetDate: <text>@Model.Items[0].targetdate</text><br>
											TargetDateUTC: <text>@Model.Items[0].targetdateUTC</text><br>
											DateTime.Now: <text>@DateTime.Now</text><br>
											DateTime.UtcNow: <text>@DateTime.UtcNow</text><br>
											TimeZoneInfo: <br>DisplayName:<text>@Model.Site.TimeZone.DisplayName</text><br>
											UtcOffset: <text>@Model.Site.TimeZone.BaseUtcOffset</text>*@
										</div>
									}
									else {
										<div class="countdown-clock__block">
											<div class="countdown-clock__value" data-attr="countdown-days">
												<span>0</span>
												<span>0</span>
											</div>
											<p class="countdown-clock__label">
												<span>Days</span>
											</p>
										</div>
										<div class="countdown-clock__block"> 
											<div class="countdown-clock__value" data-attr="countdown-hours">
												<span>0</span>
												<span>0</span>
											</div>
											<p class="countdown-clock__label">
												<span>Hours</span>
											</p>
										</div>
										<div class="countdown-clock__block">
											<div class="countdown-clock__value" data-attr="countdown-minutes">
												<span>0</span>
												<span>0</span>
											</div>
											<p class="countdown-clock__label">
												<span>Minutes</span>
											</p>
										</div>
										<div class="countdown-clock__block">
											<div class="countdown-clock__value" data-attr="countdown-seconds">
												<span>0</span>
												<span>0</span>
											</div>
											<p class="countdown-clock__label">
												<span>Seconds</span>
											</p>
										</div>
									}
								}
							</div>
						</div>
						@if (!String.IsNullOrWhiteSpace(item.url))
						{
							<p><a href="@item.url" target="@item.btnmode" class="btn btn-lg btn-primary arrow-btn arrow-first">@(!String.IsNullOrWhiteSpace(item.ctabtntext) ? item.ctabtntext : "Learn More")</a></p>
						}
					</div>
				</div>
			</div> 
		}
	</div>
	<div class="@(Model.Config.ModuleCssClass)__controls"></div>
	@if (Model.Config.UseFooter && !string.IsNullOrWhiteSpace(Model.Config.FooterContent))
	{
		<div class="@(Model.Config.ModuleCssClass)__footer">@Html.Raw(@Model.Config.HeaderContent)</div>
	}
	@if (Model.Module.IsEditable && Model.Config.Debug)
	{
		<a href="#modelinfo@(Model.Module.Id)" data-toggle="collapse">show/hide model info</a>
			<div class="collapse" id="modelinfo@(Model.Module.Id)">@ObjectInfo.Print(Model)</div>
	}
	
	
	@if (Model.Items.Count > 0 && DateTime.Compare(Model.Items[0].targetdate, DateTime.Now) > 0) 
	{
		<script>
			// Set the date we're counting down to
			var countDownDate = new Date("@Model.Items[0].targetdate").getTime();
			
			// Update the count down every 1 second
			var x = setInterval(function() {
			
			// Get today's date and time
			var now = new Date().getTime();
			
			// Find the distance between now and the count down date
			var distance = countDownDate - now;
			
			// Time calculations for days, hours, minutes and seconds
			var days = Math.floor(distance / (1000 * 60 * 60 * 24));
			var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
			var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
			var seconds = Math.floor((distance % (1000 * 60)) / 1000);
			
			// Display the result in the ariaLabel of the element with id="countdownclock"
			document.getElementById("countdownClock-"+"@(Model.Module.Id)"+"").setAttribute('aria-label', "" + days + "days, " + hours + "hrs, "
			+ minutes + "minutes, " + seconds + "seconds");

			// Display the results in each column
			// Days
			if (days.toString().length > 1) {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-days'] span")[0].innerHTML = String(days)[0];
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-days'] span")[1].innerHTML = String(days)[1];
			}
			else {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-days'] span")[1].innerHTML = days;
			}

			// Hours
			if (hours.toString().length > 1) {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-hours'] span")[0].innerHTML = String(hours)[0];
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-hours'] span")[1].innerHTML = String(hours)[1];
			}
			else {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-hours'] span")[1].innerHTML = hours;
			}

			// Minutes
			if (minutes.toString().length > 1) {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-minutes'] span")[0].innerHTML = String(minutes)[0];
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-minutes'] span")[1].innerHTML = String(minutes)[1];
			}
			else {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-minutes'] span")[1].innerHTML = minutes;
			}

			// Seconds
			if (seconds.toString().length > 1) {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-seconds'] span")[0].innerHTML = String(seconds)[0];
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-seconds'] span")[1].innerHTML = String(seconds)[1];
			}
			else {
				document.querySelectorAll("#countdownClock-@Model.Module.Id [data-attr*='-seconds'] span")[1].innerHTML = seconds;
			}

			// If the count down is finished, write some text

			if (distance <= 0) {
			
				clearInterval(x);
				
				document.getElementById("countdownClock-@Model.Module.Id").innerHTML = @Html.Raw(Json.Encode(afterMessage));
			}
			}, 1000);
		</script>
	}
</div>

